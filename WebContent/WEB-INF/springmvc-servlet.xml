<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:tx="http://www.springframework.org/schema/tx"  
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd    
            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd    
            http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd    
            http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
            http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd
            http://www.springframework.org/schema/aop  http://www.springframework.org/schema/aop/spring-aop-3.2.xsd">

	<!-- 对web包中的所有类进行扫描，以完成Bean创建和自动依赖注入的功能 -->
	<context:component-scan base-package="hxk" />
	
	<!--注意全局的Initbinder必须放在<mvc:annotation-driven>前面,否则会出400错误  -->
	 <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
	   <property name="cacheSeconds" value="0" />
	   <property name="webBindingInitializer">
	       <bean class="hxk.mvc.GlobalInitBinder" />
	   </property>
	 </bean>
	
	<mvc:annotation-driven>
        <!-- 解决返回json乱码问题，string默认编码不是UTF-8 -->
        <mvc:message-converters register-defaults="true">
            <bean class="hxk.util.CustomStringHttpMessageConverter"/>
        </mvc:message-converters>
    </mvc:annotation-driven>
	
	<!-- 启动Spring MVC的注解功能，完成请求和注解POJO的映射 -->    
	<bean class ="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter" ></bean>
	
	<!-- ViewResolver -->  
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">  
	    <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>  
	    <property name="prefix" value="/JSP/"/>  
	    <property name="suffix" value=".jsp"/>  
	</bean>  
    
    <!--使用AOP的切面  -->
    <aop:aspectj-autoproxy/>
    
    <!--依赖注入时不使用默认的构造的方法,使用静态的工厂方法  -->
    <bean id="staticInstance"  class="hxk.staticFactory.StaticInstance"  factory-method="creInstance"></bean>
      
      <!--一个工厂类里面有多个非静态方法的情况  -->
      <bean id="man" class="hxk.nonStaticFactory.Man">
 		 <!-- inject any dependencies required by this locator bean -->
	 </bean>
	 <bean id="house"  factory-bean="man" factory-method="createHouse"/>
	 <bean id="car"  factory-bean="man" factory-method="createCar"/>
      
      <!--声明懒加载的bean:当这个bean第一次被请求时才生成这个bean的实例  -->
      <bean id="lazy" class="hxk.lazyinit.ComplexBeanNeedToLazyInit" lazy-init="true"></bean>
     	
     	<!-- 使用XML的AOP -->
     	<bean id="beforeDemoXml" class="hxk.aop.xml.BeforeDemo"></bean>
     	
     	<aop:config>
     			<aop:aspect id="before" ref="beforeDemoXml">
     					<aop:before method="log" pointcut="execution(* hxk.aop.xml.*.*(..))"/>
     			</aop:aspect>
     	</aop:config>
     	
     	<!-- 声明事务管理器,指向下面的数据源 -->
      <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
     	   <property name="dataSource" ref="dataSource" />
      </bean>
      
     	  <!-- the transactional advice (what 'happens'; see the <aop:advisor/> bean below) -->
	    <tx:advice id="txAdvice" transaction-manager="transactionManager">
	        <!-- the transactional semantics... -->
	        <tx:attributes>
	            <!-- all methods starting with 'get' are read-only -->
	            <tx:method name="get*" read-only="true"/>
	            <!-- other methods use the default transaction settings (see below) -->
	            <tx:method name="*"/>
	        </tx:attributes>
	    </tx:advice>

    <!-- ensure that the above transactional advice runs for any execution of an operation defined by the FooService interface -->
	    <aop:config>
	        <aop:pointcut id="save" expression="execution(* hxk.transaction.UserManager.insertUser(..))"/>
	        <aop:advisor advice-ref="txAdvice" pointcut-ref="save"/>
	    </aop:config>
  
      
        <tx:annotation-driven />
      
      <!-- 定义数据源bean -->
	<context:property-placeholder location="classpath:jdbc.properties" />
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<property name="driverClass" value="${jdbc.driverClassName}" />
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="user" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<!-- 指定连接数据库连接池的最大连接 -->
		<property name="maxPoolSize" value="30" />
		<!-- 指定连接数据库连接池的最小连接 -->
		<property name="minPoolSize" value="10" />
		<!-- 指定连接数据库连接池的初始化连接数 -->
		<property name="initialPoolSize" value="10" />
		<property name="acquireIncrement" value="5" />
		<property name="numHelperThreads" value="10" />
		<property name="maxStatementsPerConnection" value="10" />
		<property name="idleConnectionTestPeriod" value="10000" />
		<property name="testConnectionOnCheckin" value="true" />
		<!-- 指定连接数据库连接池的最大空闲时间 -->
		<property name="maxIdleTime" value="28000" />
	</bean>
      

     
     	
	<!-- 当调用由@RequestMapping 声明的请求时,声明拦截器.. -->
	<!-- 其下有如下三个方法:postHandle(..),postHandle(..),afterCompletion(..).. -->
    <mvc:interceptors>
    	<bean id="officeHoursInterceptor"  class="hxk.handleMapping.TimeBasedAccessInterceptor">
	        <property name="openingTime" value="9"/>
	        <property name="closingTime" value="18"/>
   	    </bean>
    </mvc:interceptors> 
     
	<!-- 
	 处理文件上传 
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="defaultEncoding" value="utf-8" /> 默认编码 (ISO-8859-1)
		<property name="maxInMemorySize" value="10240" /> 最大内存大小 (10240)
		<property name="uploadTempDir" value="/upload/" /> 上传后的目录名 (WebUtils#TEMP_DIR_CONTEXT_ATTRIBUTE)
		<property name="maxUploadSize" value="-1" /> 最大文件大小，-1为无限止(-1)
	</bean> -->

</beans>
